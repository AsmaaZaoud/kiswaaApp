<<<<<<< HEAD
{"version":3,"file":"paths.js","names":["ensureSlash","inputPath","needsSlash","hasSlash","endsWith","substr","length","getPossibleProjectRoot","fs","realpathSync","process","cwd","nativePlatforms","resolveEntryPoint","projectRoot","platform","projectConfig","platforms","includes","getEntryPoint","entryFiles","extensions","getBareExtensions","getEntryPointWithExtensions","original","stdout","write","getConfig","skipSDKVersionRequirement","exp","pkg","entryPoint","ConfigError","main","entry","getFileWithExtensions","resolveFromSilentWithExtensions","Error","fileName","resolveFrom","fromDirectory","moduleId","extension","modulePath","silent","path","join","existsSync"],"sources":["../../src/paths/paths.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { getConfig } from '../Config';\nimport { ProjectConfig } from '../Config.types';\nimport { ConfigError } from '../Errors';\nimport { getBareExtensions } from './extensions';\n\n// https://github.com/facebook/create-react-app/blob/9750738cce89a967cc71f28390daf5d4311b193c/packages/react-scripts/config/paths.js#L22\nexport function ensureSlash(inputPath: string, needsSlash: boolean): string {\n  const hasSlash = inputPath.endsWith('/');\n  if (hasSlash && !needsSlash) {\n    return inputPath.substr(0, inputPath.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return `${inputPath}/`;\n  } else {\n    return inputPath;\n  }\n}\n\nexport function getPossibleProjectRoot(): string {\n  return fs.realpathSync(process.cwd());\n}\n\nconst nativePlatforms = ['ios', 'android'];\n\nexport function resolveEntryPoint(\n  projectRoot: string,\n  { platform, projectConfig }: { platform: string; projectConfig?: ProjectConfig }\n) {\n  const platforms = nativePlatforms.includes(platform) ? [platform, 'native'] : [platform];\n  return getEntryPoint(projectRoot, ['./index'], platforms, projectConfig);\n}\n\nexport function getEntryPoint(\n  projectRoot: string,\n  entryFiles: string[],\n  platforms: string[],\n  projectConfig?: ProjectConfig\n): string | null {\n  const extensions = getBareExtensions(platforms);\n  return getEntryPointWithExtensions(projectRoot, entryFiles, extensions, projectConfig);\n}\n\n// Used to resolve the main entry file for a project.\nexport function getEntryPointWithExtensions(\n  projectRoot: string,\n  entryFiles: string[],\n  extensions: string[],\n  projectConfig?: ProjectConfig\n): string {\n  if (!projectConfig) {\n    // drop all logging abilities\n    const original = process.stdout.write;\n    process.stdout.write = () => true;\n    try {\n      projectConfig = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n    } finally {\n      process.stdout.write = original;\n    }\n  }\n\n  const { exp, pkg } = projectConfig;\n\n  if (typeof exp?.entryPoint === 'string') {\n    // We want to stop reading the app.json for determining the entry file in SDK +49\n    throw new ConfigError(\n      'expo.entryPoint has been removed in favor of the main field in the package.json.',\n      'DEPRECATED'\n    );\n  }\n\n  if (pkg) {\n    // If the config doesn't define a custom entry then we want to look at the `package.json`s `main` field, and try again.\n    const { main } = pkg;\n    if (main && typeof main === 'string') {\n      // Testing the main field against all of the provided extensions - for legacy reasons we can't use node module resolution as the package.json allows you to pass in a file without a relative path and expect it as a relative path.\n      let entry = getFileWithExtensions(projectRoot, main, extensions);\n      if (!entry) {\n        // Allow for paths like: `{ \"main\": \"expo/AppEntry\" }`\n        entry = resolveFromSilentWithExtensions(projectRoot, main, extensions);\n        if (!entry)\n          throw new Error(\n            `Cannot resolve entry file: The \\`main\\` field defined in your \\`package.json\\` points to a non-existent path.`\n          );\n      }\n      return entry;\n    }\n  }\n\n  // Now we will start looking for a default entry point using the provided `entryFiles` argument.\n  // This will add support for create-react-app (src/index.js) and react-native-cli (index.js) which don't define a main.\n  for (const fileName of entryFiles) {\n    const entry = resolveFromSilentWithExtensions(projectRoot, fileName, extensions);\n    if (entry) return entry;\n  }\n\n  try {\n    // If none of the default files exist then we will attempt to use the main Expo entry point.\n    // This requires `expo` to be installed in the project to work as it will use `node_module/expo/AppEntry.js`\n    // Doing this enables us to create a bare minimum Expo project.\n\n    // TODO(Bacon): We may want to do a check against `./App` and `expo` in the `package.json` `dependencies` as we can more accurately ensure that the project is expo-min without needing the modules installed.\n    return resolveFrom(projectRoot, 'expo/AppEntry');\n  } catch {\n    throw new Error(\n      `The project entry file could not be resolved. Please define it in the \\`main\\` field of the \\`package.json\\`, create an \\`index.js\\`, or install the \\`expo\\` package.`\n    );\n  }\n}\n\n// Resolve from but with the ability to resolve like a bundler\nexport function resolveFromSilentWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  for (const extension of extensions) {\n    const modulePath = resolveFrom.silent(fromDirectory, `${moduleId}.${extension}`);\n    if (modulePath && modulePath.endsWith(extension)) {\n      return modulePath;\n    }\n  }\n  return resolveFrom.silent(fromDirectory, moduleId) || null;\n}\n\n// Statically attempt to resolve a module but with the ability to resolve like a bundler.\n// This won't use node module resolution.\nexport function getFileWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  const modulePath = path.join(fromDirectory, moduleId);\n  if (fs.existsSync(modulePath)) {\n    return modulePath;\n  }\n  for (const extension of extensions) {\n    const modulePath = path.join(fromDirectory, `${moduleId}.${extension}`);\n    if (fs.existsSync(modulePath)) {\n      return modulePath;\n    }\n  }\n  return null;\n}\n"],"mappings":"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"}
=======
{"version":3,"file":"paths.js","names":["ensureSlash","inputPath","needsSlash","hasSlash","endsWith","substr","length","getPossibleProjectRoot","fs","realpathSync","process","cwd","nativePlatforms","resolveEntryPoint","projectRoot","platform","projectConfig","platforms","includes","getEntryPoint","entryFiles","extensions","getBareExtensions","getEntryPointWithExtensions","exp","pkg","getConfig","skipSDKVersionRequirement","entryPoint","entry","getFileWithExtensions","resolveFromSilentWithExtensions","main","Error","fileName","resolveFrom","fromDirectory","moduleId","extension","modulePath","silent","path","join","existsSync"],"sources":["../../src/paths/paths.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { getConfig } from '../Config';\nimport { ProjectConfig } from '../Config.types';\nimport { getBareExtensions } from './extensions';\n\n// https://github.com/facebook/create-react-app/blob/9750738cce89a967cc71f28390daf5d4311b193c/packages/react-scripts/config/paths.js#L22\nexport function ensureSlash(inputPath: string, needsSlash: boolean): string {\n  const hasSlash = inputPath.endsWith('/');\n  if (hasSlash && !needsSlash) {\n    return inputPath.substr(0, inputPath.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return `${inputPath}/`;\n  } else {\n    return inputPath;\n  }\n}\n\nexport function getPossibleProjectRoot(): string {\n  return fs.realpathSync(process.cwd());\n}\n\nconst nativePlatforms = ['ios', 'android'];\n\nexport function resolveEntryPoint(\n  projectRoot: string,\n  { platform, projectConfig }: { platform: string; projectConfig?: ProjectConfig }\n) {\n  const platforms = nativePlatforms.includes(platform) ? [platform, 'native'] : [platform];\n  return getEntryPoint(projectRoot, ['./index'], platforms, projectConfig);\n}\n\nexport function getEntryPoint(\n  projectRoot: string,\n  entryFiles: string[],\n  platforms: string[],\n  projectConfig?: ProjectConfig\n): string | null {\n  const extensions = getBareExtensions(platforms);\n  return getEntryPointWithExtensions(projectRoot, entryFiles, extensions, projectConfig);\n}\n\n// Used to resolve the main entry file for a project.\nexport function getEntryPointWithExtensions(\n  projectRoot: string,\n  entryFiles: string[],\n  extensions: string[],\n  projectConfig?: ProjectConfig\n): string {\n  const { exp, pkg } = projectConfig ?? getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // This will first look in the `app.json`s `expo.entryPoint` field for a potential main file.\n  // We check the Expo config first in case you want your project to start differently with Expo then in a standalone environment.\n  if (exp && exp.entryPoint && typeof exp.entryPoint === 'string') {\n    // If the field exists then we want to test it against every one of the supplied extensions\n    // to ensure the bundler resolves the same way.\n    let entry = getFileWithExtensions(projectRoot, exp.entryPoint, extensions);\n    if (!entry) {\n      // Allow for paths like: `{ \"main\": \"expo/AppEntry\" }`\n      entry = resolveFromSilentWithExtensions(projectRoot, exp.entryPoint, extensions);\n\n      // If it doesn't resolve then just return the entryPoint as-is. This makes\n      // it possible for people who have an unconventional setup (eg: multiple\n      // apps in monorepo with metro at root) to customize entry point without\n      // us imposing our assumptions.\n      if (!entry) {\n        return exp.entryPoint;\n      }\n    }\n    return entry;\n  } else if (pkg) {\n    // If the config doesn't define a custom entry then we want to look at the `package.json`s `main` field, and try again.\n    const { main } = pkg;\n    if (main && typeof main === 'string') {\n      // Testing the main field against all of the provided extensions - for legacy reasons we can't use node module resolution as the package.json allows you to pass in a file without a relative path and expect it as a relative path.\n      let entry = getFileWithExtensions(projectRoot, main, extensions);\n      if (!entry) {\n        // Allow for paths like: `{ \"main\": \"expo/AppEntry\" }`\n        entry = resolveFromSilentWithExtensions(projectRoot, main, extensions);\n        if (!entry)\n          throw new Error(\n            `Cannot resolve entry file: The \\`main\\` field defined in your \\`package.json\\` points to a non-existent path.`\n          );\n      }\n      return entry;\n    }\n  }\n\n  // Now we will start looking for a default entry point using the provided `entryFiles` argument.\n  // This will add support for create-react-app (src/index.js) and react-native-cli (index.js) which don't define a main.\n  for (const fileName of entryFiles) {\n    const entry = resolveFromSilentWithExtensions(projectRoot, fileName, extensions);\n    if (entry) return entry;\n  }\n\n  try {\n    // If none of the default files exist then we will attempt to use the main Expo entry point.\n    // This requires `expo` to be installed in the project to work as it will use `node_module/expo/AppEntry.js`\n    // Doing this enables us to create a bare minimum Expo project.\n\n    // TODO(Bacon): We may want to do a check against `./App` and `expo` in the `package.json` `dependencies` as we can more accurately ensure that the project is expo-min without needing the modules installed.\n    return resolveFrom(projectRoot, 'expo/AppEntry');\n  } catch {\n    throw new Error(\n      `The project entry file could not be resolved. Please either define it in the \\`package.json\\` (main), \\`app.json\\` (expo.entryPoint), create an \\`index.js\\`, or install the \\`expo\\` package.`\n    );\n  }\n}\n\n// Resolve from but with the ability to resolve like a bundler\nexport function resolveFromSilentWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  for (const extension of extensions) {\n    const modulePath = resolveFrom.silent(fromDirectory, `${moduleId}.${extension}`);\n    if (modulePath && modulePath.endsWith(extension)) {\n      return modulePath;\n    }\n  }\n  return resolveFrom.silent(fromDirectory, moduleId) || null;\n}\n\n// Statically attempt to resolve a module but with the ability to resolve like a bundler.\n// This won't use node module resolution.\nexport function getFileWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  const modulePath = path.join(fromDirectory, moduleId);\n  if (fs.existsSync(modulePath)) {\n    return modulePath;\n  }\n  for (const extension of extensions) {\n    const modulePath = path.join(fromDirectory, `${moduleId}.${extension}`);\n    if (fs.existsSync(modulePath)) {\n      return modulePath;\n    }\n  }\n  return null;\n}\n"],"mappings":"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"}
>>>>>>> main
